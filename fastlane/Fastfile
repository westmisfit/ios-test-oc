# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.6.0"

default_platform :ios


platform :ios do

  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."

    # cocoapods

    # increment_build_number

    # ipa(scheme: "westtest") # Build your app - more options available

    # xctool # run the tests of your app
  end

  desc "Build staging app"
  lane :staging do
    # cocoapods
    clear
    unittest
    coverage
  end

  desc "Clear output"
  lane :clear do
    system("echo clear...; rm -rf ../out/")
  end

  desc "Runs all the tests"
  lane :unittest do
    # xctool can't find implicit dependencies
    # see https://github.com/facebook/xctool/issues/16

    # see https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md#xctool
    xctool :test, [
      "-workspace", "testapp-c.xcworkspace",
      "-scheme", "testapp-c",
      "-sdk", "iphonesimulator8.4",
      "GCC_GENERATE_TEST_COVERAGE_FILES=YES",
      "GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES",
      "-IDECustomDerivedDataLocation='out/build_ccov'"
    ].join(" ")

    # see https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md#xctest
    # xctest(
    #   scheme: "testapp-c",
    #   destination: "platform=iOS Simulator,name=iPhone 6",
    #   build_settings: Hash[
    #     "GCC_GENERATE_TEST_COVERAGE_FILES" => "YES",
    #     "GCC_INSTRUMENT_PROGRAM_FLOW_ARCS" => "YES",
    #     "-IDECustomDerivedDataLocation" => "out/build_ccov"
    #   ]
    # )
  end

  desc "Generate coverage report"
  lane :coverage do
    # see https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md#gcovr
    # gcovr(
    #   html: true,
    #   html_details: true,
    #   output: "./out/coverage/report.html",
    #   root: "."
    # )

    # see https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md#gcovr
    gcovr(
      xml: true,
      output: "./out/coverage/report.xml",
      root: ".",
      keep: true,
      gcov_exclude: ".*#(?:PrometheusTests|Frameworks)#.*"
    )
  end


  after_all do |lane|
    # This block is called, only if the executed lane was successful
    
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end


  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end

end


# More information about multiple platforms in fastlane: 
# https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
